document.addEventListener('DOMContentLoaded', () => {
  // DOM elements
  const wordContainer = document.getElementById('word-container');
  const hintElement = document.getElementById('hint');
  const keyboardElement = document.getElementById('keyboard');
  const newGameButton = document.getElementById('new-game');
  const statusElement = document.createElement('div');
  statusElement.id = 'status';
  statusElement.style.textAlign = 'center';
  statusElement.style.marginTop = '10px';
  wordContainer.parentNode.insertBefore(statusElement, wordContainer.nextSibling);

  // Game state
  let currentWord = '';
  let guessedLetters = [];
  let gameOver = false;
  let remainingTries = 8; // Number of incorrect guesses allowed
  let incorrectGuesses = 0; // Track incorrect guesses
  let score = 0; // Track player's score
  let highScore = localStorage.getItem('thaiWordGameHighScore') || 0; // Get high score from local storage

  // Complete Thai keyboard layout - Accurate and properly labeled
  const thaiConsonants = [
    // First row
    '‡∏Å', '‡∏Ç', '‡∏É', '‡∏Ñ', '‡∏Ö', '‡∏Ü', '‡∏á', '‡∏à', '‡∏â', '‡∏ä', '‡∏ã', 
    // Second row
    '‡∏å', '‡∏ç', '‡∏é', '‡∏è', '‡∏ê', '‡∏ë', '‡∏í', '‡∏ì', '‡∏î', '‡∏ï', 
    // Third row
    '‡∏ñ', '‡∏ó', '‡∏ò', '‡∏ô', '‡∏ö', '‡∏õ', '‡∏ú', '‡∏ù', '‡∏û', '‡∏ü', 
    // Fourth row
    '‡∏†', '‡∏°', '‡∏¢', '‡∏£', '‡∏•', '‡∏ß', '‡∏®', '‡∏©', '‡∏™', '‡∏´', 
    // Fifth row
    '‡∏¨', '‡∏≠', '‡∏Æ'
  ];
  
  const thaiVowels = [
    // Single characters
    '‡∏∞', '‡∏≤', '‡∏≥', '‡∏¥', '‡∏µ', '‡∏∂', '‡∏∑', '‡∏∏', '‡∏π', '‡πÄ', '‡πÅ', '‡πÇ', '‡πÉ', '‡πÑ',
    // Tone marks
    '‡πà', '‡πâ', '‡πä', '‡πã', '‡πá', '‡πå', '‡∏±','‡πç'
  ];
  
  const thaiSpecial = [
    // Thai numerals
    '‡πê', '‡πë', '‡πí', '‡πì', '‡πî', '‡πï', '‡πñ', '‡πó', '‡πò', '‡πô',
    // Special symbols used in Thai writing
    '‡πÜ', '‡∏Ø', '‡∏ø', '"', '"'
  ];
  
  // Combine all characters for the full keyboard
  const thaiKeyboard = [...thaiConsonants, ...thaiVowels, ...thaiSpecial];

  // Create score display
  const scoreContainer = document.createElement('div');
  scoreContainer.id = 'score-container';
  scoreContainer.classList.add('score-container');
  hintElement.parentNode.insertBefore(scoreContainer, hintElement);
  
  // Additional game state
  let streak = 0; // Winning streak counter
  
  // Check if the device is mobile
  const isMobile = window.matchMedia("(max-width: 480px)").matches;
  
  // Function to update score display
  function updateScoreDisplay() {
    scoreContainer.innerHTML = `
      <div class="score-box">
        <div class="current-score">
          <div class="score-title">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</div>
          <div class="score-value">${score}</div>
          ${streak > 1 ? `<div class="streak-counter">${streak}üî•</div>` : ''}
        </div>
        <div class="high-score">
          <div class="score-title">‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î</div>
          <div class="score-value">${highScore}</div>
        </div>
      </div>
    `;
  }
  
  // Initialize the game
  async function initGame() {
    gameOver = false;
    guessedLetters = [];
    remainingTries = 8;
    incorrectGuesses = 0;
    statusElement.textContent = '';
    updateScoreDisplay();
    
    // Adjust for mobile devices
    if (isMobile) {
      // Add virtual keyboard support for mobile
      if (!document.getElementById('hidden-input')) {
        const hiddenInput = document.createElement('input');
        hiddenInput.id = 'hidden-input';
        hiddenInput.style.position = 'absolute';
        hiddenInput.style.opacity = '0';
        hiddenInput.style.height = '0';
        hiddenInput.style.width = '0';
        hiddenInput.style.pointerEvents = 'none';
        hiddenInput.autocomplete = 'off';
        hiddenInput.autocorrect = 'off';
        hiddenInput.autocapitalize = 'off';
        hiddenInput.spellcheck = false;
        document.body.appendChild(hiddenInput);
        
        // Focus the hidden input when clicking anywhere in the game area
        document.querySelector('.game-area').addEventListener('click', () => {
          hiddenInput.focus({preventScroll: true});
        });
        
        // Handle input events for virtual keyboards
        hiddenInput.addEventListener('input', (e) => {
          const key = e.data;
          if (key && key.length === 1) {
            // Create a synthetic keydown event
            const syntheticEvent = {key: key};
            handleKeyPress(syntheticEvent);
          }
          // Clear the input for next character
          hiddenInput.value = '';
        });
      }
      
      // Focus initially
      setTimeout(() => {
        const hiddenInput = document.getElementById('hidden-input');
        if (hiddenInput) hiddenInput.focus({preventScroll: true});
      }, 500);
    }
    
    // Show loading state
    wordContainer.innerHTML = '<div style="text-align: center; width: 100%;">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</div>';
    hintElement.textContent = '';
    
    try {
      // Get a word from our API that connects to Ollama
      const wordObj = await getWordFromOllama();
      currentWord = wordObj.word;
      
      // Display hint
      hintElement.textContent = wordObj.hint;
    } catch (error) {
      console.error('Error initializing game:', error);
      // Fallback to sample word if API fails
      const sampleWords = [
        { word: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û', hint: '‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏´‡∏•‡∏ß‡∏á‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢' },
        { word: '‡∏ä‡πâ‡∏≤‡∏á', hint: '‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢' },
        { word: '‡∏™‡πâ‡∏°‡∏ï‡∏≥', hint: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏™‡∏à‡∏±‡∏î ‡∏ó‡∏≥‡∏à‡∏≤‡∏Å‡∏°‡∏∞‡∏•‡∏∞‡∏Å‡∏≠' },
        { word: '‡∏ó‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', hint: '‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏•‡∏¥‡πà‡∏ô‡πÅ‡∏£‡∏á ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏û‡∏á' },
        { word: '‡∏°‡∏ß‡∏¢‡πÑ‡∏ó‡∏¢', hint: '‡∏Å‡∏µ‡∏¨‡∏≤‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ä‡∏≤‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡πÑ‡∏ó‡∏¢' },
        { word: '‡∏™‡∏á‡∏Å‡∏£‡∏≤‡∏ô‡∏ï‡πå', hint: '‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•‡∏õ‡∏µ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏ó‡∏¢ ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡∏ô‡πâ‡∏≥' },
        { word: '‡∏•‡∏≠‡∏¢‡∏Å‡∏£‡∏∞‡∏ó‡∏á', hint: '‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•‡πÅ‡∏´‡πà‡∏á‡∏™‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô' },
        { word: '‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢', hint: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡πã‡∏ß‡∏¢‡πÄ‡∏ï‡∏µ‡πã‡∏¢‡∏ß‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å ‡πÅ‡∏•‡∏∞‡∏ñ‡∏±‡πà‡∏ß‡∏á‡∏≠‡∏Å' },
        { word: '‡πÅ‡∏Å‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏ß‡∏≤‡∏ô', hint: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏£‡∏™‡πÄ‡∏ú‡πá‡∏î ‡πÉ‡∏™‡πà‡∏Å‡∏∞‡∏ó‡∏¥‡πÅ‡∏•‡∏∞‡∏û‡∏£‡∏¥‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß' },
        { word: '‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á', hint: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏£‡∏™‡∏à‡∏±‡∏î ‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£' },
        { word: '‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß', hint: '‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡∏≤‡∏ô‡∏û‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß‡∏°‡∏£‡∏Å‡∏ï' },
        { word: '‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤', hint: '‡∏≠‡∏î‡∏µ‡∏ï‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ó‡∏¢ ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏°‡∏£‡∏î‡∏Å‡πÇ‡∏•‡∏Å' },
        { word: '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà', hint: '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏≤‡∏á‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡πÑ‡∏ó‡∏¢ ‡∏°‡∏µ‡∏î‡∏≠‡∏¢‡∏™‡∏∏‡πÄ‡∏ó‡∏û' }
      ];
      const randomIndex = Math.floor(Math.random() * sampleWords.length);
      const wordObj = sampleWords[randomIndex];
      currentWord = wordObj.word;
      hintElement.textContent = wordObj.hint;
    }
    
    // Create word display
    renderWord();
    
    // Create keyboard
    renderKeyboard();
  }

  // Render the word with boxes
  function renderWord() {
    wordContainer.innerHTML = '';
    
    // Create tries indicator
    const triesElement = document.createElement('div');
    triesElement.classList.add('tries-indicator');
    triesElement.innerHTML = `
      <span>‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ú‡∏¥‡∏î: ${remainingTries - incorrectGuesses}</span>
      <div class="hearts">
        ${Array(remainingTries).fill().map((_, i) => 
          i < (remainingTries - incorrectGuesses) 
            ? '<span class="heart">‚ù§Ô∏è</span>' 
            : '<span class="heart empty">üñ§</span>'
        ).join('')}
      </div>
    `;
    wordContainer.appendChild(triesElement);
    
    // Create letter boxes container
    const boxesContainer = document.createElement('div');
    boxesContainer.classList.add('boxes-container');
    boxesContainer.style.display = 'flex';
    boxesContainer.style.justifyContent = 'center';
    boxesContainer.style.flexWrap = 'wrap';
    boxesContainer.style.gap = '10px';
    boxesContainer.style.margin = '15px 0';
    
    for (const char of currentWord) {
      const letterBox = document.createElement('div');
      letterBox.classList.add('letter-box');
      
      if (guessedLetters.includes(char)) {
        letterBox.textContent = char;
      }
      
      boxesContainer.appendChild(letterBox);
    }
    
    wordContainer.appendChild(boxesContainer);
    
    // Check if game is lost
    if (incorrectGuesses >= remainingTries && !gameOver) {
      gameOver = true;
      
      // Reset streak when losing
      streak = 0;
      
      // Lose points for losing
      const pointsLost = 50;
      score = Math.max(0, score - pointsLost); // Lose 50 points, but not below 0
      updateScoreDisplay();
      
      // Create result message
      const resultMessage = document.createElement('div');
      resultMessage.classList.add('result-message', 'lose-message');
      resultMessage.innerHTML = `
        <h2>üò¢ ‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à‡∏î‡πâ‡∏ß‡∏¢! ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏û‡πâ‡πÅ‡∏•‡πâ‡∏ß! üò¢</h2>
        <div class="word-reveal">
          <p>‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: <strong>${currentWord}</strong></p>
          <p>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢: ${hintElement.textContent}</p>
        </div>
        <div class="score-summary">
          <p>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢: <strong>-${pointsLost}</strong> ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</p>
          <p>‡∏ä‡∏ô‡∏∞‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á: ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô 0</p>
        </div>
        <div class="next-word">
          <p>‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏´‡∏°?</p>
          <button id="try-again-button" class="button continue-button">‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà</button>
        </div>
      `;
      
      // Show modal with result
      setTimeout(() => {
        document.body.appendChild(resultMessage);
        
        // Add event listener to try again button
        const tryAgainButton = document.getElementById('try-again-button');
        tryAgainButton.addEventListener('click', () => {
          document.body.removeChild(resultMessage);
          initGame(); // Start a new game
        });
        
        // Also continue on Enter key
        const handleEnterKey = (e) => {
          if (e.key === 'Enter') {
            document.body.removeChild(resultMessage);
            document.removeEventListener('keydown', handleEnterKey);
            initGame(); // Start a new game
          }
        };
        document.addEventListener('keydown', handleEnterKey);
        
        // Focus the button for accessibility
        tryAgainButton.focus();
      }, 300);
    }
    
    // Check if game is won
    const allLettersGuessed = [...currentWord].every(letter => guessedLetters.includes(letter));
    if (allLettersGuessed && !gameOver) {
      gameOver = true;
      
      // Calculate score: base points + bonus for remaining tries
      const basePoints = 100;
      const bonusPoints = (remainingTries - incorrectGuesses) * 20;
      const wordLengthBonus = currentWord.length * 10;
      const roundScore = basePoints + bonusPoints + wordLengthBonus;
      
      // Increment streak and apply streak bonus
      streak++;
      const streakBonus = streak > 1 ? (streak * 10) : 0;
      
      // Update score with streak bonus
      score += roundScore + streakBonus;
      
      // Update high score if needed
      if (score > highScore) {
        highScore = score;
        localStorage.setItem('thaiWordGameHighScore', highScore);
      }
      
      // Update score display
      updateScoreDisplay();
      
      // Create result message
      const resultMessage = document.createElement('div');
      resultMessage.classList.add('result-message', 'win-message');
      resultMessage.innerHTML = `
        <h2>üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏ô‡∏∞‡πÅ‡∏•‡πâ‡∏ß! üéâ</h2>
        <div class="score-summary">
          <p>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ: <strong>${roundScore + streakBonus}</strong> ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</p>
          <div class="score-details">
            <p>- ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô: ${basePoints} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</p>
            <p>- ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${bonusPoints} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</p>
            <p>- ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ñ‡∏≥: ${wordLengthBonus} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</p>
            ${streak > 1 ? `<p>- ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏ä‡∏ô‡∏∞‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á (${streak}): ${streakBonus} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</p>` : ''}
          </div>
        </div>
        <div class="next-word">
          <p>‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏´‡∏°?</p>
          <button id="continue-button" class="button continue-button">‡πÄ‡∏•‡πà‡∏ô‡∏ï‡πà‡∏≠</button>
        </div>
      `;
      
      // Show modal with result
      setTimeout(() => {
        document.body.appendChild(resultMessage);
        
        // Add event listener to continue button
        const continueButton = document.getElementById('continue-button');
        continueButton.addEventListener('click', () => {
          document.body.removeChild(resultMessage);
          initGame(); // Start a new game
        });
        
        // Also continue on Enter key
        const handleEnterKey = (e) => {
          if (e.key === 'Enter') {
            document.body.removeChild(resultMessage);
            document.removeEventListener('keydown', handleEnterKey);
            initGame(); // Start a new game
          }
        };
        document.addEventListener('keydown', handleEnterKey);
        
        // Focus the button for accessibility
        continueButton.focus();
      }, 300);
    }
  }

  // Render the Thai keyboard in sections
  function renderKeyboard() {
    keyboardElement.innerHTML = '';
    
    // Create section headers and containers
    const createSection = (title, className, characters) => {
      const sectionDiv = document.createElement('div');
      sectionDiv.classList.add('keyboard-section');
      sectionDiv.classList.add(className);
      
      const sectionTitle = document.createElement('div');
      sectionTitle.classList.add('section-title');
      sectionTitle.textContent = title;
      sectionDiv.appendChild(sectionTitle);
      
      const keysContainer = document.createElement('div');
      keysContainer.classList.add('keys-container');
      
      characters.forEach(letter => {
        const keyButton = document.createElement('button');
        keyButton.classList.add('key');
        keyButton.textContent = letter;
        
        if (guessedLetters.includes(letter)) {
          if (currentWord.includes(letter)) {
            keyButton.classList.add('correct');
          } else {
            keyButton.classList.add('incorrect');
          }
        }
        
        keyButton.addEventListener('click', () => {
          if (!gameOver && !guessedLetters.includes(letter)) {
            guessedLetters.push(letter);
            
            // Check if guess is incorrect
            if (!currentWord.includes(letter)) {
              incorrectGuesses++;
            }
            
            renderWord();
            renderKeyboard();
          }
        });
        
        keysContainer.appendChild(keyButton);
      });
      
      sectionDiv.appendChild(keysContainer);
      return sectionDiv;
    };
    
    // Create each section
    const consonantsSection = createSection('‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞', 'consonants-section', thaiConsonants);
    const vowelsSection = createSection('‡∏™‡∏£‡∏∞‡πÅ‡∏•‡∏∞‡∏ß‡∏£‡∏£‡∏ì‡∏¢‡∏∏‡∏Å‡∏ï‡πå', 'vowels-section', thaiVowels);
    const specialSection = createSection('‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©', 'special-section', thaiSpecial);
    
    // Add sections to keyboard
    keyboardElement.appendChild(consonantsSection);
    keyboardElement.appendChild(vowelsSection);
    keyboardElement.appendChild(specialSection);
  }

  // Connect to our API endpoint that communicates with Ollama
  async function getWordFromOllama() {
    try {
      const response = await fetch('/api/getWord', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        }
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      return data;
    } catch (error) {
      console.error('Error fetching from Ollama API:', error);
      const sampleWords = [
        { word: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û', hint: '‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏´‡∏•‡∏ß‡∏á‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢' },
        { word: '‡∏ä‡πâ‡∏≤‡∏á', hint: '‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢' },
        { word: '‡∏™‡πâ‡∏°‡∏ï‡∏≥', hint: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏™‡∏à‡∏±‡∏î ‡∏ó‡∏≥‡∏à‡∏≤‡∏Å‡∏°‡∏∞‡∏•‡∏∞‡∏Å‡∏≠' },
        { word: '‡∏ó‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', hint: '‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏•‡∏¥‡πà‡∏ô‡πÅ‡∏£‡∏á ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏û‡∏á' },
        { word: '‡∏°‡∏ß‡∏¢‡πÑ‡∏ó‡∏¢', hint: '‡∏Å‡∏µ‡∏¨‡∏≤‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ä‡∏≤‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡πÑ‡∏ó‡∏¢' },
        { word: '‡∏™‡∏á‡∏Å‡∏£‡∏≤‡∏ô‡∏ï‡πå', hint: '‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•‡∏õ‡∏µ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏ó‡∏¢ ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡∏ô‡πâ‡∏≥' },
        { word: '‡∏•‡∏≠‡∏¢‡∏Å‡∏£‡∏∞‡∏ó‡∏á', hint: '‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•‡πÅ‡∏´‡πà‡∏á‡∏™‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô' },
        { word: '‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢', hint: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡πã‡∏ß‡∏¢‡πÄ‡∏ï‡∏µ‡πã‡∏¢‡∏ß‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å ‡πÅ‡∏•‡∏∞‡∏ñ‡∏±‡πà‡∏ß‡∏á‡∏≠‡∏Å' },
        { word: '‡πÅ‡∏Å‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏ß‡∏≤‡∏ô', hint: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏£‡∏™‡πÄ‡∏ú‡πá‡∏î ‡πÉ‡∏™‡πà‡∏Å‡∏∞‡∏ó‡∏¥‡πÅ‡∏•‡∏∞‡∏û‡∏£‡∏¥‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß' },
        { word: '‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á', hint: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏£‡∏™‡∏à‡∏±‡∏î ‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£' },
        { word: '‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß', hint: '‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡∏≤‡∏ô‡∏û‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß‡∏°‡∏£‡∏Å‡∏ï' },
        { word: '‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤', hint: '‡∏≠‡∏î‡∏µ‡∏ï‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ó‡∏¢ ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏°‡∏£‡∏î‡∏Å‡πÇ‡∏•‡∏Å' },
        { word: '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà', hint: '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏≤‡∏á‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡πÑ‡∏ó‡∏¢ ‡∏°‡∏µ‡∏î‡∏≠‡∏¢‡∏™‡∏∏‡πÄ‡∏ó‡∏û' },
        { word: '‡πÄ‡∏°‡∏∑‡∏≠‡∏á', hint: '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏Å‡∏£‡∏≠‡∏≤‡∏®‡∏±‡∏¢‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô' },
        { word: '‡∏ñ‡∏ô‡∏ô', hint: '‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á' },
        { word: '‡∏ï‡∏•‡∏≤‡∏î', hint: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤' },
        { word: '‡∏ö‡πâ‡∏≤‡∏ô', hint: '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏≤‡∏®‡∏±‡∏¢' },
        { word: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£', hint: '‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏¥‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢' },
        { word: '‡∏´‡∏°‡∏≠', hint: '‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÇ‡∏£‡∏Ñ' },
        { word: '‡∏Ñ‡∏£‡∏π', hint: '‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠' }
      ];
      return sampleWords[Math.floor(Math.random() * sampleWords.length)]; // Fallback
    }
  }

  // Map physical keyboard to Thai characters
  const keyboardMap = {
    // Common physical keyboard to Thai mapping
    'q': '‡πÜ', 'w': '‡πÑ', 'e': '‡∏≥', 'r': '‡∏û', 't': '‡∏∞', 'y': '‡∏±', 'u': '‡∏µ', 'i': '‡∏£', 'o': '‡∏ô', 'p': '‡∏¢', '[': '‡∏ö', ']': '‡∏•',
    'a': '‡∏ü', 's': '‡∏´', 'd': '‡∏Å', 'f': '‡∏î', 'g': '‡πÄ', 'h': '‡πâ', 'j': '‡πà', 'k': '‡∏≤', 'l': '‡∏™', ';': '‡∏ß', '\'': '‡∏á',
    'z': '‡∏ú', 'x': '‡∏õ', 'c': '‡πÅ', 'v': '‡∏≠', 'b': '‡∏¥', 'n': '‡∏∑', 'm': '‡∏ó', ',': '‡∏°', '.': '‡πÉ', '/': '‡∏ù',
    // Number row
    '1': '‡πÖ', '2': '/', '3': '-', '4': '‡∏†', '5': '‡∏ñ', '6': '‡∏∏', '7': '‡∏∂', '8': '‡∏Ñ', '9': '‡∏ï', '0': '‡∏à', '-': '‡∏Ç', '=': '‡∏ä'
  };
  
  // Handle keyboard input
  function handleKeyPress(event) {
    if (gameOver) return;
    
    let key = event.key;
    
    // Map physical keyboard keys to Thai characters
    if (keyboardMap[key]) {
      key = keyboardMap[key];
    }
    
    // Debug information for Thai keyboard input
    console.log(`Key pressed: "${key}" (original: "${event.key}"), Char code: ${key.charCodeAt(0)}`);
    
    // Check if the pressed key is in the Thai keyboard
    if (thaiKeyboard.includes(key) && !guessedLetters.includes(key)) {
      // Update status to show last pressed key and how to type it
      const physicalKey = Object.keys(keyboardMap).find(k => keyboardMap[k] === key) || '‡∏ï‡∏£‡∏á';
      statusElement.innerHTML = `‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏î: <span class="key-highlight">${key}</span> (‡∏û‡∏¥‡∏°‡∏û‡πå‡πÇ‡∏î‡∏¢‡∏Å‡∏î: ${physicalKey === '‡∏ï‡∏£‡∏á' ? '‡∏ï‡∏£‡∏á' : `"${physicalKey}"`})`;
      statusElement.style.color = '#3498db';
      
      // Process the key press
      guessedLetters.push(key);
      
      // Check if the guess is incorrect
      if (!currentWord.includes(key)) {
        incorrectGuesses++;
        // No sound for incorrect guess
      } else {
        // No sound for correct guess
      }
      
      // Show visual feedback for the pressed key
      const keyElements = document.querySelectorAll('.key');
      keyElements.forEach(element => {
        // Handle extended character matching
        if (element.textContent === key) {
          // Add active class for animation
          element.classList.add('active');
          
          // Scroll the key into view if needed
          element.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
          
          // Add correct/incorrect class
          if (currentWord.includes(key)) {
            element.classList.add('correct');
          } else {
            element.classList.add('incorrect');
          }
          
          // Remove active class after animation
          setTimeout(() => {
            element.classList.remove('active');
          }, 300);
        }
      });
      
      // Update the word display
      renderWord();
      renderKeyboard();
    } else if (key.length === 1) {
      // For keys not in the Thai keyboard, show helpful message
      statusElement.innerHTML = `‡∏Ñ‡∏µ‡∏¢‡πå <span class="key-warning">"${key}"</span> ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÄ‡∏Å‡∏°‡∏ô‡∏µ‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡πÄ‡∏î‡∏≤‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß`;
      statusElement.style.color = '#e74c3c';
      
      // Clear message after a delay
      setTimeout(() => {
        statusElement.textContent = '‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏ä‡πâ‡πÅ‡∏õ‡πâ‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô';
        statusElement.style.color = '#666';
      }, 2000);
    }
  }

  // Create reset score button
  const resetScoreButton = document.createElement('button');
  resetScoreButton.classList.add('button', 'reset-button');
  resetScoreButton.textContent = '‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô';
  resetScoreButton.style.marginLeft = '10px';
  resetScoreButton.style.backgroundColor = '#e74c3c';
  resetScoreButton.addEventListener('click', () => {
    if (confirm('‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô?')) {
      score = 0;
      highScore = 0;
      localStorage.setItem('thaiWordGameHighScore', 0);
      updateScoreDisplay();
    }
  });
  
  // Add reset score button next to new game button
  newGameButton.parentNode.appendChild(resetScoreButton);
  
  // Event listeners
  newGameButton.addEventListener('click', initGame);
  document.addEventListener('keydown', handleKeyPress);
  
  // Add instruction and keyboard help
  const instructionElement = document.createElement('div');
  instructionElement.classList.add('instruction');
  instructionElement.innerHTML = `
    <p>‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÅ‡∏õ‡πâ‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏≤‡∏Ñ‡∏≥‡πÑ‡∏î‡πâ</p>
    <p>‡πÅ‡∏ï‡πâ‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ‡∏ä‡∏ô‡∏∞ = 100 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô + ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ñ‡∏≥‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠, ‡πÅ‡∏û‡πâ = -50 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</p>
    <button id="show-keyboard-help" class="button" style="margin: 10px auto; background-color: #4caf50; font-size: 14px; padding: 8px 15px;">‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÑ‡∏ó‡∏¢</button>
  `;
  instructionElement.style.textAlign = 'center';
  instructionElement.style.marginTop = '15px';
  instructionElement.style.fontSize = '14px';
  instructionElement.style.color = '#666';
  keyboardElement.parentNode.insertBefore(instructionElement, keyboardElement.nextSibling);
  
  // Create keyboard help element
  const keyboardHelpElement = document.createElement('div');
  keyboardHelpElement.classList.add('keyboard-help');
  keyboardHelpElement.style.display = 'none'; // Hidden by default
  keyboardHelpElement.innerHTML = `
    <h3>‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÑ‡∏ó‡∏¢</h3>
    <p>‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÅ‡∏õ‡πâ‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå‡∏õ‡∏Å‡∏ï‡∏¥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÑ‡∏ó‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î:</p>
    <div class="keyboard-layout">
      ${Object.entries(keyboardMap).slice(0, 15).map(([physical, thai]) => `
        <div class="key-mapping">
          <span class="physical-key">${physical}</span> ‚Üí <span class="thai-key">${thai}</span>
        </div>
      `).join('')}
      <div class="key-mapping"><span class="physical-key">...</span> ‚Üí <span class="thai-key">‡πÅ‡∏•‡∏∞‡∏≠‡∏∑‡πà‡∏ô‡πÜ</span></div>
    </div>
    <p style="margin-top: 10px; font-style: italic;">‡∏™‡∏•‡∏±‡∏ö‡πÅ‡∏õ‡πâ‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÑ‡∏ó‡∏¢‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á</p>
    <button id="hide-keyboard-help" class="button" style="margin: 10px auto; background-color: #7f8c8d; font-size: 14px; padding: 8px 15px;">‡∏ã‡πà‡∏≠‡∏ô</button>
  `;
  instructionElement.appendChild(keyboardHelpElement);
  
  // Add event listeners for keyboard help toggle
  document.addEventListener('click', (event) => {
    if (event.target.id === 'show-keyboard-help') {
      keyboardHelpElement.style.display = 'block';
    } else if (event.target.id === 'hide-keyboard-help') {
      keyboardHelpElement.style.display = 'none';
    }
  });

  // Start the game
  initGame();
});